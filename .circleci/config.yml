version: 2
jobs:
  build-macos:
    resource_class: macos.m1.medium.gen1
    working_directory: ~/tidepool-org/chrome-uploader
    parallelism: 1
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      BASH_ENV: ".circleci/bash_env.sh"
    macos:
      xcode: '13.4.1'
    steps:
    - checkout
    - run: git submodule sync
    - run: git submodule update --init
    # #- run: curl -o AppleWWDRCA.cer https://developer.apple.com/certificationauthority/AppleWWDRCA.cer && sudo security import AppleWWDRCA.cer -k /Library/Keychains/System.keychain
    # - run: curl -o AppleWWDRCAG2.cer https://www.apple.com/certificateauthority/AppleWWDRCAG2.cer && sudo security import AppleWWDRCAG2.cer -k /Library/Keychains/System.keychain
    # #- run: curl -o AppleWWDRCAG3.cer https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer && sudo security import AppleWWDRCAG3.cer -k /Library/Keychains/System.keychain
    # - run: curl -o AppleWWDRCAG4.cer https://www.apple.com/certificateauthority/AppleWWDRCAG4.cer && sudo security import AppleWWDRCAG4.cer -k /Library/Keychains/System.keychain
    # - run: curl -o AppleWWDRCAG5.cer https://www.apple.com/certificateauthority/AppleWWDRCAG5.cer && sudo security import AppleWWDRCAG5.cer -k /Library/Keychains/System.keychain
    # - run: curl -o AppleWWDRCAG6.cer https://www.apple.com/certificateauthority/AppleWWDRCAG6.cer && sudo security import AppleWWDRCAG6.cer -k /Library/Keychains/System.keychain
    - run: echo 'export PATH=${PATH}:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin' >> $BASH_ENV
    - restore_cache:
        key: dependency-cache-{{ checksum "package.json" }}
    - run:
        name: Install nvm and node
        command: |
          set +e
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
          source ~/.nvm/nvm.sh
          nvm install v16.14.2
          nvm alias default v16.14.2
    - run: node -v
    - run: curl -o- -L https://yarnpkg.com/install.sh | bash
    - run: yarn config set cache-folder ~/.cache/yarn
    - run: yarn --frozen-lockfile
    - save_cache:
        key: dependency-cache-{{ checksum "package.json" }}
        paths:
        - ~/.cache/yarn
        - ./node_modules
    # Test
    - run: yarn lint
    - run: yarn test

    # Keychain setup step
    - run:
        name: Setup Custom Keychain
        command: |
          # Check if CSC_LINK and CSC_KEY_PASSWORD are set
          if [[ -z "$CSC_LINK" || -z "$CSC_KEY_PASSWORD" ]]; then
            echo "CSC_LINK or CSC_KEY_PASSWORD environment variables are missing. Aborting."
            exit 1
          fi

          # Create a temporary directory for the custom keychain
          temp_keychain_dir=$(mktemp -d)
          custom_keychain_path="$temp_keychain_dir/custom.keychain"

          # Keychain and certificate password
          custom_keychain_password="tempChainPass"

          # Save the temp_keychain_dir to a file for later cleanup
          echo "$temp_keychain_dir" > keychain_dir.txt

          # Create a custom keychain using CSC_LINK
          security create-keychain -p "$custom_keychain_password" "$custom_keychain_path"
          security import "$CSC_LINK" -k "$custom_keychain_path" -P "$CSC_KEY_PASSWORD"

          # Set the custom keychain as the system default
          security default-keychain -s "$custom_keychain_path"

          # Remove CSC_LINK from the environment variables
          unset CSC_LINK
    # Package
    - run: if [ -z "$CIRCLE_PR_NUMBER" ]; then yarn package; else echo "Forked repo; no package built."; fi
    # Keychain cleanup step
    - run:
        name: Cleanup Custom Keychain
        command: |
          # Read the temp_keychain_dir path from the saved file
          temp_keychain_dir=$(cat keychain_dir.txt)

          # Clean up: Delete the temporary keychain directory
          if [ -d "$temp_keychain_dir" ]; then
            rm -rf "$temp_keychain_dir"
            echo "Custom keychain directory deleted."
          else
            echo "Custom keychain directory not found."
          fi

          # Remove the keychain_dir.txt file
          rm -f keychain_dir.txt
  build-windows:
    machine:
      # see https://circleci.com/developer/machine/image/windows-server-2019 for details
      image: windows-server-2019-vs2019:stable
    resource_class: windows.medium
    shell: bash.exe
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      # note: node 16.14.2 with npm 8.3.1 breaks yarn installation
      - run: nvm install v16.13.2
      - run: nvm use v16.13.2
      - run: node -v
      - run: npm install --global yarn
      - run: yarn config set cache-folder ~/.cache/yarn
      - run: yarn --frozen-lockfile
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
          - ~/.cache/yarn
          - ./node_modules
      # Test
      - run: yarn lint
      - run: yarn test
      # Package
      - run: if [ -z "$CIRCLE_PR_NUMBER" ]; then yarn package; else echo "Forked repo; no package built."; fi
      - run: if [ -n "$CIRCLE_TAG" ]; then yarn av-whitelist; else echo "Not a tagged release."; fi

# runs build for all branches and all tags starting with v.
workflows:
  version: 2
  build-release:
    jobs:
      - build-macos:
          filters:
            tags:
              only: /^v.*/
      - build-windows:
          filters:
            tags:
              only: /^v.*/
